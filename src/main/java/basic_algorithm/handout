Java – это объектно-ориентированный язык программирования, компилируемый и интерпритированный
JVM (Java Virtual Machine) — виртуальная машина Java. Это программный модуль, зависящий от платформы, который служит для
 интерпретации исходного байт-кода в машинный код и его исполнения.

JRE (Java Runtime Environment) — среда выполнения Java. Включает в себя реализацию JVM для конкретной платформы и набор
 библиотек, необходимых для выполнения программ на Java.

JDK (Java Development Kit) — набор инструментов разработчика, необходимых для написания программ на Java.
Включает в себя компилятор, JRE, набор стандартных библиотек Java, документацию, различные утилиты.

Maven - сборщик проектов, фреймворк для автоматизации сборки проектов на основе описания их структуры в файлах на языке
 POM (англ. Project Object Model), являющемся подмножеством XML.

Компиляторы в устройстве Java: Javac, Jit
Java code -> Javac->Bytecode->Jit->Native Code for system

Git - система контроля версий
Selenium WebDriver — это инструмент для автоматизации действий веб-браузера. В большинстве случаев используется для
тестирования Web-приложений, но этим не ограничивается.

HTML - (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — стандартизированный язык разметки
 документов во Всемирной паутине.
XPath (XML Path Language) — язык запросов к элементам XML-документа. Разработан для организации доступа к частям
 документа XML в файлах трансформации XSLT и является стандартом консорциума W3C.

DOM (от англ. Document Object Model — «объектная модель документа») — это независящий от платформы и языка программный
 интерфейс, позволяющий программам и скриптам получить доступ к содержимому HTML-, XHTML- и XML-документов, а также
 изменять содержимое, структуру и оформление таких документов. (parent-child system)

Sort Algorithms:
Quick Sort, Insertion Sort, Selection Sort, Bubble Sort, Merge Sort, Radix Sort, Heap Sort
Search Algorithms:
Linear Search, Binary Search, Depth first Search, Breadth first Search

Принципы ООП:
1.Наследование — механизм, который позволяет описать новый класс на основе существующего (родительского). При этом
свойства и функциональность родительского класса заимствуются новым классом.
2. Абстракция означает выделение главных, наиболее значимых характеристик предмета и наоборот — отбрасывание
второстепенных, незначительных.
3.Инкапсуляция в Java означает ограничение доступа к данным и возможностям их изменения.
4.Полиморфизм — это возможность работать с несколькими типами так, будто это один и тот же тип. При этом поведение
объектов будет разным в зависимости от типа, к которому они принадлежат.

Ответы на задания:
1) Модели User, Animal, Car в файлах .java
2) переведи модели на java язык - Done
3) Наследование:
  3.1) что такое наследование, что оно дает: Наследование — механизм, который позволяет описать новый класс на
основе существующего (родительского). При этом
свойства и функциональность родительского класса заимствуются новым классом.
  3.2) что такое переопределение методов - определение метода в дочернем классе идентичному методу родительского класса
для указания необходимой работы метода, необходимой именно для работы дочернего класса.
  3.3) зачем нужна аннотация @Override: данная аннотация указывает компилятору проверить наличие метода и его полей
в родительском классе для его переопределения, не создавая новый идентичный метод
  3.4) конструкторы - использование дефолтивных либо расширенных конструкторов - какие есть правила при наследовании
  может ли наследник существовать без супер класса?
  какой порядок выполнения конструкторов при наследовании?
 Правила наследования:
     1. Наследовать можно только от класса, уровень доступа которого выше дочернего или равен ему. То есть публичный
 класс не может наследоваться от приватного.
     2. Дочерний класс не может обращаться к приватным полям и методам родительского. Поэтому нужно либо определять
 логику приватных компонентов в базовом классе, либо создавать публичные свойства и методы, которые будут своего рода
 посредниками.
     3. У дочернего класса может быть только один родительский, но у родительского может быть несколько дочерних.
     4. Можно наследовать от класса, который наследует от другого класса. Но с этим лучше не злоупотреблять,
 потому что можно быстро запутаться в их взаимосвязях.
     5. Нельзя переопределять конструкторы родителя. При создании обьекта дочернего класса вызывается вся цепочка
 родительских конструкторов.
     6. Дефолтные конструкторы класса вызываются автоматически, если не указаны иные конструкторы. При указании расширенных
конструкторов - используются они. Дефолтный можно указывать явно.

  3.5) какая ошибка в следующей реализации наследования?
class Person {
    long age;
    Person(long age) {
       this.age = age;
    }
  }
  class Child extends Person {
  }
  class Test {
    public static void main() {
      new Child();
    }
  }
В роодительском классе Person перегружен конструтор, при инициализации дочернего класса как "new Child();" будет
активироваться дефолтный конструтор родительского класса, который без явного определения не сработает.